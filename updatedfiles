import socket
import threading
import sys
import os
import time 

active_clients = 0
max_clients = 0
client_lock = threading.Lock()


def handle_client(client_socket):
    global active_clients
    request = client_socket.recv(1024).decode()

    headers = request.split("\n")
    filename = headers[0].split()[1]
    filename = filename[1:]
    time.sleep(5) 

    try:
        with open(filename, "rb") as f:
            content = f.read()
        response = "HTTP/1.1 200 OK\r\n\r\n".encode()
        client_socket.send(response + content)
    except FileNotFoundError:
        response = "HTTP/1.1 404 NOT FOUND\r\n\r\nFile Not Found".encode()
        client_socket.send(response)

    active_clients -= 1
    client_socket.close()



def main():
    global active_clients, max_clients

    if len(sys.argv) != 3:
        print("Usage: server.py SERVER_PORT MAX_CLIENTS")
        exit(1)

    max_clients = int(sys.argv[2])

    server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server.bind(("127.0.0.1", int(sys.argv[1])))
    server.listen(max_clients)

    print(f"[*] Listening on 127.0.0.1:{sys.argv[1]}")
    print(f"[*] Max clients: {max_clients}")

    while True:
        client, addr = server.accept()

        if active_clients < max_clients:
            print(f"[*] Accepted connection from: {addr[0]}:{addr[1]}")
            active_clients += 1
            client_handler = threading.Thread(target=handle_client, args=(client,))
            client_handler.start()
        else:
            pass 
            print("Max clients reached. Waiting for a client to disconnect.")
            
            request = client.recv(1024).decode()
            response = "HTTP/1.1 503 Service Unavailable\r\n\r\nMax clients reached.".encode()
            client.send(response)
            client.close()


if __name__ == "__main__":
    main()
import socket
import sys
import time


def main():
    # Check for correct number of arguments
    if len(sys.argv) != 3:
        print("Usage: python3 client.py <PORT> <FILENAME>")
        sys.exit(1)

    # Retrieve command line arguments
    port = int(sys.argv[1])
    filename = sys.argv[2]

    # Create a socket object
    client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

    # Connect to the server on localhost and the given port
    client_socket.connect(("127.0.0.1", port))

    # Construct and send the HTTP GET request
    request = f"GET /{filename} HTTP/1.1\r\nHost: 127.0.0.1:{port}\r\n\r\n"
    client_socket.send(request.encode())

    # Receive the response from the server
    response = client_socket.recv(4096).decode()

    if "503 Service Unavailable" in response:
        print("Server busy: Max clients reached.")
    elif "404 NOT FOUND" in response:
        print("File not found.")
    else:
        # Save the response with a unique filename using a timestamp
        timestamp = str(int(time.time()))
        save_filename = f"received_{timestamp}_{filename}"
        print("saved filename:", save_filename)
        with open(save_filename, "w") as file:
            file.write(response)
        print(f"Response saved as {save_filename}")

    print("disconnected")
    client_socket.close()


if __name__ == "__main__":
    main()
